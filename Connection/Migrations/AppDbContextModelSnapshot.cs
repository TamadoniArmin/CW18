// <auto-generated />
using System;
using Connection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Connection.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Bank.Cards.Entities.Card", b =>
                {
                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<double>("Daylitransaction")
                        .HasColumnType("float");

                    b.Property<int>("HolderId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("InsertingPasswordWrongly")
                        .HasColumnType("int");

                    b.Property<bool>("IsActice")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SetedLimitationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CardNumber");

                    b.HasIndex("HolderId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            CardNumber = "5859831000619801",
                            Balance = 2000.0,
                            Daylitransaction = 0.0,
                            HolderId = 1,
                            Id = 1,
                            InsertingPasswordWrongly = 0,
                            IsActice = true,
                            Password = "123",
                            SetedLimitationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CardNumber = "5859831000619802",
                            Balance = 2000.0,
                            Daylitransaction = 0.0,
                            HolderId = 1,
                            Id = 2,
                            InsertingPasswordWrongly = 0,
                            IsActice = true,
                            Password = "123",
                            SetedLimitationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CardNumber = "5859831000619803",
                            Balance = 2000.0,
                            Daylitransaction = 0.0,
                            HolderId = 2,
                            Id = 3,
                            InsertingPasswordWrongly = 0,
                            IsActice = true,
                            Password = "123",
                            SetedLimitationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CardNumber = "5859831000619804",
                            Balance = 2000.0,
                            Daylitransaction = 0.0,
                            HolderId = 2,
                            Id = 4,
                            InsertingPasswordWrongly = 0,
                            IsActice = true,
                            Password = "123",
                            SetedLimitationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CardNumber = "5859831000619805",
                            Balance = 2000.0,
                            Daylitransaction = 0.0,
                            HolderId = 3,
                            Id = 5,
                            InsertingPasswordWrongly = 0,
                            IsActice = true,
                            Password = "123",
                            SetedLimitationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Bank.TransAction.Entities.TransAction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("DestinationCardId")
                        .HasColumnType("int");

                    b.Property<string>("DestinationCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SourceCardId")
                        .HasColumnType("int");

                    b.Property<string>("SourceCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("TransactionId");

                    b.HasIndex("DestinationCardNumber");

                    b.HasIndex("SourceCardNumber");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("App.Domain.Core.Bank.User.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Armin@gmail.com",
                            Name = "Armin",
                            Password = "123",
                            UserName = "armin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Ali@gmail.com",
                            Name = "Ali",
                            Password = "123",
                            UserName = "ali"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Mehdi@gmail.com",
                            Name = "Mehdi",
                            Password = "123",
                            UserName = "mehdi"
                        },
                        new
                        {
                            Id = 4,
                            Email = "Nazanin@gmail.com",
                            Name = "Nazanin",
                            Password = "123",
                            UserName = "nazanin"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Bank.Cards.Entities.Card", b =>
                {
                    b.HasOne("App.Domain.Core.Bank.User.Entities.User", "Holder")
                        .WithMany("cards")
                        .HasForeignKey("HolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holder");
                });

            modelBuilder.Entity("App.Domain.Core.Bank.TransAction.Entities.TransAction", b =>
                {
                    b.HasOne("App.Domain.Core.Bank.Cards.Entities.Card", "DestinationCard")
                        .WithMany("DestinationTransactions")
                        .HasForeignKey("DestinationCardNumber")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Bank.Cards.Entities.Card", "SourceCard")
                        .WithMany("SourceTransactions")
                        .HasForeignKey("SourceCardNumber")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DestinationCard");

                    b.Navigation("SourceCard");
                });

            modelBuilder.Entity("App.Domain.Core.Bank.Cards.Entities.Card", b =>
                {
                    b.Navigation("DestinationTransactions");

                    b.Navigation("SourceTransactions");
                });

            modelBuilder.Entity("App.Domain.Core.Bank.User.Entities.User", b =>
                {
                    b.Navigation("cards");
                });
#pragma warning restore 612, 618
        }
    }
}
